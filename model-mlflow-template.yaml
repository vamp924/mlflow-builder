apiVersion: v1
kind: Template
metadata:
  name: model-mlflow-template
  annotations:
    description: "Template for deploying exported MLFlow model"
    tags: "model,mlflow"
    openshift.io/display-name: "MLFlow binary model deploy"
labels:
  template: "model-mlflow-template"
  app: model-${MODELNAME}-${MODELVERSION}
objects:
- kind: ImageStream
  apiVersion: v1
  metadata:
    labels:
      app: model-${MODELNAME}-${MODELVERSION}
    name: model-${MODELNAME}-${MODELVERSION}
  spec: {}
- kind: BuildConfig
  apiVersion: build.openshift.io/v1
  metadata:
    labels:
      build: model-${MODELNAME}-${MODELVERSION}
    name: model-${MODELNAME}-${MODELVERSION}
  spec:
    failedBuildsHistoryLimit: 5
    successfulBuildsHistoryLimit: 5
    output:
      to:
        kind: ImageStreamTag
        name: model-${MODELNAME}-${MODELVERSION}:${MODELVERSION}
    runPolicy: Serial
    source:
      dockerfile: |+
        FROM builder-r:latest
        SHELL [ "/bin/bash", "-c" ]
        RUN mv $(mlflow artifacts download -u s3://sum/${EXPERIMENTID}/${RUNID}/artifacts/model/)/* /opt/model/
        RUN if [ -f 'conda.yaml' ]; then for pkg in $(yq r conda.yaml 'dependencies.*' | sed '/^python=.*$/d' | yq r - pip.*); do pip3 install --system --no-cache-dir --index-url ${PYPI_URL} $pkg; done; fi
        RUN for pkg in $(mlflow models predict -m /opt/model --no-conda -t csv -i <(echo 'a,b;1,2') 2>&1 >/dev/null | grep -Po '(?<=no package called ‘)[^’]*'); do R --vanilla -e "install.packages('$pkg', repo='${CRAN_URL}', clean=TRUE, quiet=TRUE)"; done;
        EXPOSE 8000
        CMD mlflow models serve -m /opt/model -h 0.0.0.0 -p 8000 --no-conda
      type: Dockerfile
    strategy:
      dockerStrategy:
        env:
        - name: AWS_ACCESS_KEY_ID
          valueFrom:
            secretKeyRef:
              key: AWS_ACCESS_KEY_ID
              name: s3-access-credentials
        - name: AWS_SECRET_ACCESS_KEY
          valueFrom:
            secretKeyRef:
              key: AWS_SECRET_ACCESS_KEY
              name: s3-access-credentials
        - name: MLFLOW_S3_ENDPOINT_URL
          valueFrom:
            secretKeyRef:
              key: MLFLOW_S3_ENDPOINT_URL
              name: s3-access-credentials
        from:
          kind: ImageStreamTag
          name: mlflow-base:latest
      type: Docker
    triggers:
    - github:
        secret: ${WEBHOOK_TRIGGER_SECRET}
      type: GitHub
    - generic:
        secret: ${WEBHOOK_TRIGGER_SECRET}
      type: Generic
    - type: ConfigChange
    - type: ImageChange
- kind: Secret
  apiVersion: v1
  metadata:
    labels:
      app: model-${MODELNAME}-${MODELVERSION}
    name: s3-access-credentials
  stringData:
    AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
    AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
    MLFLOW_S3_ENDPOINT_URL: ${MLFLOW_S3_ENDPOINT_URL}
  type: Opaque
- kind: DeploymentConfig
  apiVersion: apps.openshift.io/v1
  metadata:
    labels:
      app: model-${MODELNAME}-${MODELVERSION}
    name: model-${MODELNAME}-${MODELVERSION}
  spec:
    replicas: 1
    revisionHistoryLimit: 5
    selector:
      deploymentconfig: model-${MODELNAME}-${MODELVERSION}
    strategy:
      activeDeadlineSeconds: 21600
      resources: {}
      rollingParams:
        intervalSeconds: 1
        maxSurge: 25%
        maxUnavailable: 25%
        timeoutSeconds: 600
        updatePeriodSeconds: 1
      type: Rolling
    template:
      metadata:
        labels:
          deploymentconfig: model-${MODELNAME}-${MODELVERSION}
      spec:
        containers:
        - env:
          - name: DISABLE_NGINX
            value: "true"
          image: ' '
          imagePullPolicy: Always
          name: model-${MODELNAME}-${MODELVERSION}
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          livenessProbe:
            httpGet:
              port: 8000
              path: /
            initialDelaySeconds: 15
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - model-${MODELNAME}-${MODELVERSION}
        from:
          kind: ImageStreamTag
          name: model-${MODELNAME}-${MODELVERSION}:${MODELVERSION}
      type: ImageChange
- kind: Service
  apiVersion: v1
  metadata:
    labels:
      app: model-${MODELNAME}-${MODELVERSION}
      template: model-mlflow-template
    name: model-${MODELNAME}-${MODELVERSION}
  spec:
    ports:
    - port: 8000
      protocol: TCP
      targetPort: 8000
    selector:
      deploymentconfig: model-${MODELNAME}-${MODELVERSION}
    sessionAffinity: None
    type: ClusterIP
- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    labels:
      app: model-${MODELNAME}-${MODELVERSION}
      template: model-mlflow-template
    name: model-${MODELNAME}-${MODELVERSION}
  spec:
    host: model-${MODELNAME}-${MODELVERSION}.apps.br77.ru
    port:
      targetPort: 8000
    to:
      kind: Service
      name: model-${MODELNAME}-${MODELVERSION}
      weight: 100
    wildcardPolicy: None
parameters:
  - name: MODELNAME
    displayName: MLFlow model name
    description: Name of the MLFlow model for s3 url construction
    value: model
    required: true
  - name: MODELVERSION
    displayName: MLFlow model version tag for s3 url construction
    value: latest
    required: true
  - name: EXPERIMENTID
    displayName: MLFlow experiment id for S3 url
    required: true
  - name: RUNID
    displayName: MLFlow run id for s3 URL
    required: true
  - name: AWS_ACCESS_KEY_ID
    displayName: AWS access key id for model S3 repository
    value: minioadmin
    required: true
  - name: AWS_SECRET_ACCESS_KEY
    displayName: AWS secret key for model S3 repository
    value: minioadmin
    required: true
  - name: MLFLOW_S3_ENDPOINT_URL
    displayName: AWS endpoint URL
    value: http://84.201.157.251:9000/
    required: true
  - name: WEBHOOK_TRIGGER_SECRET
    displayName: secret for triggering the build process
    generate: expression
    from: "[a-zA-Z0-9]{20}"
    required: true
  - name: CRAN_URL
    description: URL of preferred CRAN mirror for R packages
    value: https://cran.r-project.org/
  - name: PYPI_URL
    description: URL of PyPI index to look for Python packages
    value: https://pypi.python.org/simple

